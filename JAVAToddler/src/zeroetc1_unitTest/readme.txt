테스트(단위테스트, 통합테스트, 성능테스트, 인수테스트) -> 논리적인 버그 추출에 활용함.

* 소프트웨어 개발시 테스트 정책서(테스트 조직단위로 작성),전략서(IEEE829 표준을 따르며 테스트 정책을 수립해야함.),
   계획서(스케줄과 테스트 시나리오, 테스트 케이스가 포함됨.)는 요구사항 정의 단계에서부터 착수하여 구현단계까지 마무리하고 테스트를 수행한다. 
  "비용을 천문학적으로 증가시킴에도 불구하고 프로젝트에 정말 아무런 도움이 되지도 않는 단위 테스트를 작성하기란 정말 쉽다."
  
* 단위 테스트는 버그를 찾기 위한 것이 아니다.

* 좋은 단위 테스트를 작성하기 위한 팁들
      1) 하나의 테스트 케이스는 단위 기능중 하나의 시나리오만 테스트하라 
	  2) 불필요한 검증 구문은 작성하지 마라
	  3) 각 테스트는 독립적이어야 한다
	  4) 테스트에 필요한 모든 외부서비스와 상태들은 스텁으로 제공되야 한다
	  5) 시스템 설정파일에 관한 단위 테스트를 작성하지마라
	  6) 단위 테스트 케이스의 이름은 명확하고 일관되게 테스트의 의미를 반영해야한다
	  7) 외부 시스템이나 서비스에 대한 의존성이 가장 낮은 메소드들에 대해 테스트를 먼저 작성하라 그리고 확장해 가라
	  8) private 메소드를 포함한 모든 메소드들은 가시범위에 상관없이 적절한 단위 테스트들을 작성해야 한다
	  9) 각각의 단위 테스트 메소드는 정확히 하나의 검증구문을 가져야 한다
	  10) 예상된 예외 사항을 테스트하는 단위 테스트 코드를 작성하라
	  11) 가장 적합한 검증 구문을 사용하라
	  12) 검증 구문 파라미터들은 적합한 순서대로 배치하라
	  13) 테스트를 위한 코드는 제품 코드에서 분리되어야 한다
	  14) 단위 테스트 내에서 아무것도 출력하지 마라
	  15) 정적 변수를 테스트 클래스에 사용하지 마라
	  16) 예외 발생시 단순히 테스트를 실패하기 위한 catch 구문을 작성하지 마라
	  17) 간접적인 테스트에 의존하지 마라
	  18) 위 테스트를 자동으로 실행하게 빌드 스크립트를 작성해라
	  19) 단위 테스트들의 실행을 생략하지 마라(@Ignore 어노테이션을 사용하지 마라)
	  20) 테스트 결과를 XML 형태로 출력하라
	  
1. JUnit 라이브러리를 이용한 단위테스트 수행
   * eclipse내에 JUnit을 이용한 단위테스트 수행을위한 환경은 구성되어있음.
   1.1 테스트 대상의 클래스와 해당 클래스내 메서드를 확정함.
   1.2 이클립스 junit 라이브러리와 플러그인을 활용 테스트 클래스(테스트 케이스)를 작성.
       (테스트 계획서 기반으로 작성함.)
       1.2.1 생성마법사 -> junit Test Case -> 테스트 팩키지는 별도로 구성.
                                                               테스트 클래스명은 타겟 클래스명+"Test"로 명명함.
             -> netxt -> 테스트대상 메서드 체크 -> finish   
       1.2.2 junit 라이브러리의 활용
             	assertEquals(비교값, 타겟 클래스의 대상 메서드 호출) - 타겟 클래스의 대상 메서드 호출 후 반환값과 비교값 동일 여부
				assertFalse(타겟 클래스의 대상 메서드 호출) - 타겟 클래스의 대상 메서드 호출 후 반환값이 false 여부
				assertTrue(타겟 클래스의 대상 메서드 호출) - 타겟 클래스의 대상 메서드 호출 후 반환값이 true 여부
				assertNull(타겟 클래스의 대상 메서드 호출) - 타겟 클래스의 대상 메서드 호출 후 반환값이 null 여부
				assertNotNull(타겟 클래스의 대상 메서드 호출) - 타겟 클래스의 대상 메서드 호출 후 반환값이 not null 여부
				assertSame(비교객체, 타겟 클래스의 대상 메서드 호출) - 타겟 클래스의 대상 메서드 호출 후 반환객체와 비교객체의 동일한 객체 여부	
				assertNotSame(비교객체, 타겟 클래스의 대상 메서드 호출) - 타겟 클래스의 대상 메서드 호출 후 반환객체와 비교객체의 상이한 객체 여부
				assertThat(비교값 또는 비교객체, is(타겟 클래스의 대상 메서드 호출을 통한 반환값 또는 반환객체))
				fail(메세지) - 테스트 실패 처리 및 코맨트      
       1.2.3 테스트 실행
                  가) 테스트 클래스 -> Run as or Debug as -> JUnit Test로 실행 -> 실행결과확인(JUnit View)
         
1. 자바 프로그래머가 되어야하는 이유
   - 제임스 고슬링에의해 1991년 초기 모델링되었다.
   - 1995년 첫 공개버젼인 java 1.0 발표하였다.
   - 가전제품에 탑재될 언어로 개발되었으며, 당시 개발된 한개의 산출물은 어떤 OS에서도 실행이 될수 있는 특징으로
     주목 받았다.
   - 네트워크기반 분산처리 시스템 구축을위한 보안과 네트웍기반 파일접근 기능이 결합되어 보다 더욱
     각광을 받게되었다.
   - 현재 보안이 강화된 웹어플리케이션 개발에서 독보적인 위치를 차지하고 있다.
   - 기타 언어에비해 기술습득 cost가 저렴하다.
   - 공개되어 즉시 활용될수있는 안정적인 레퍼런스가 타 언어 대비 월등하게 존재한다.
   - 자바는 유닉스(C언어를 활용해 개발된 OS) 개발 배경을 가진 개발자들에의해 개발되어 C/C++ 언어와
     비슷 하지만, C/C++ 언어의 습득 대비 좀더 용이한 기술습득이 가능하다.
   - 객체지향언어로써 코드의 낭비를 막고, 객체는 단일 관점과 성향에따라 분리 개발되고 분리된 객체간 관계를 정립해       작성과 유지보수 비용 지출의 효율을 기할수 있다.
   - 보안의 필요성이 강조되는 네트워크  기반 분산 처리 시스템을 대상으로 디자인된 언어로서 바이러스 등의 침투에
     강하고, 메모리 접근을 불가능하게해 개발자들의 메모리 제어에대한 스트레스를 불식시켰다.
   - 기능별, 지역별 등으로 분산된 개별 어플리케이션은 각각의 독자적인 플랫폼(OS)과 특징적인 하드웨어상에서 
     실행되어지며, 이렇한 개별 실행 환경에서의 개별 어플리케이션들의 통합 실행을 목적으로 개발된 자바는
     Write one, Run Anywhere를 기초로 이기종 플랫폼간 이식성이 높음.
   - 기타 개발 언어 개발자의 처우 대비 30%이상의 처우가 보장된다.


*** 프로그래밍 언어는 외국어와 다르지 않습니다.
    반복 학습과 반복적인 활용으로 습득됩니다.
    처음 보는 클래스와 처음 보는 메서드는 반드시 자바 API(자바 설명서) 문서에서 찾아 보고 
    클래스의 정의와 메서드의 정의와 활용 패턴을 확인합시다.
    그리고, 코드 디버깅을 반드시 활용합니다. 

*** 프로그래밍 절차
    1. 개발 대상의 분석
    2. 개발 계획의 문서화
       2.1 타이틀 작성
       2.2 개발 목표 작성
       2.3 요구기능(구현 대상 기능) 명세화
       2.4 요구기능(구현 대상 기능)별 구현 간 우선순위 분석
       2.5 구현 대상 기능별 세부 목표 작성
       2.6 설계 
           2.6.1 인터페이스 설계(인터페이스 분리의 원칙)
           2.6.2 추상클래스 설계
           2.6.3 구현 클래스 설계(단일역활 원칙)
           2.6.4 상속과 구현 관계 설계(리드코프 치완 원칙)
           2.6.5 개방과 폐쇄 설계(개방과 폐쇄의 원칙)
           2.6.6 디자인 패턴 적용 검토(의존성 역전의 원칙 포함) 
    3. 구현
    4. 디버깅
    5. 동료검토
    6. 단위테스트
    7. 완료
        
2. 표준 출력
3. 주석
4. java API 주석의 활용과 export
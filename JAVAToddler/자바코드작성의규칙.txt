* 컴퓨터가 이해할수있는 코드는 바보도 만들수있다.  좋은 프로그래머는 다른 개발자가 쉽게 
  이해할수있는  코드를 만든다. - 마틴 파울러 -
1. 코드는 작성 후 항상 업그레이드되므로   확장성을 지향하고, 지속적으로 안정적으로
   동작하는 코드로 만들기위해 리펙토링 수행.
2. 멘터넌스를 염두에 둔 코드 작성   (클래스, 함수 대상의 명확한 주석처리)
3. 코드의 재활용을위해 쉽고 간략한 코드작성 지향
4. 끝없는 요구사항을통해 지속적으로 변화되어야하는  코드에는 유연함이 부여되어야함.
5. 일반적인 코딩룰을 습관화해 코드의 가독성을 높임.
   5.1 표기법의 적용
   5.2 가독성을 높이기위한 규칙의 습관화
       클래스 내의 구조
          전역변수(인스턴스, 클래스 변수) -> 생성자 -> static 블럭 -> normal 블럭 ->
          overriding 메서드 -> overloading 메서드 -> public 메서드 ->  private 메서드
          (연관된 함수들을 함께 배치)
6. 코딩의 마음가짐
    6.1 타 개발자의 개발에 활용될수있도록 안정적이고,  성능좋은 라이브러리와 API를 제공
        한다는 배려심.
    6.2 1년뒤에 자신이 바라볼 코드라고 인식함.
    6.3 타 개발자의 코드와 통일성있도록 코드 작성.
    6.4 타 개발자에게 쉽게 파악될수있는 코드를 작성.
7. 코드 작성, 디버깅, 리팩토링 과정을 거치는 코드 생산 작업에서 가장 중요한것은 코드 
   표현 생산 퍼포먼스임을 명심.
    7.1 코딩 중에는 마우스를 최대한 활용하지 않는다.
    7.2 자신이 활용하는 툴의 단축키를 최대한 활용한다.
    7.3 디버깅하기 쉽도록 코드를 작성한다.
    7.4 반복되는 작업을 편하게 할수있는 툴을 찾아라.
    7.5 코딩 중에는 코딩에만 집중한다.
8. 자바의 주요 키워드를 반드시 이해한다.
    8.1 추상화 : 중요하고, 필수적인 사항에 집중하여, 공통적인 사항을 캡슐화(클래스)한것
    8.2 클래스 : 명확한 한계와 의미를 갖는 사물이나 개념을 추상화를통해 클래스(속성와 행위)화한것
                    속성 - 변수
                    행위 - 함수
    8.3 객체 : 클래스를 인스턴스화(메모리에 위치시킴)한것
    8.4 캡슐화 : 주요한 구현 기술에대해 외부에 노출하지 않도록 하는것
    8.5 모듈화 : 크고 복잡한 존재를 작고 단순하게 부분화하고, 단순화된 존재들 각각을
                 독립적으로 구현하는 것
    8.6 컴포넌트 : 단일 프로세스의 처리를 위해 각각의 모듈로 구성된 존재로서 캡슐화, 재사용
                   가능한것
9. 클래스는 반드시 단 한개의 동일 성격, 성향의 추상화 기능을 구현하기위해 필요로하는 변수와 
   함수만으로 구성되어야하며, 함수 역시 단 한개의 세부 추상화 기능 구현 로직만을 포함하며,  
   서로 다른 기능이 구현된 클래스들의 관계(상속, 일반화, 실체화, 의존, 연관)를 기초로 어플리케
   이션은 실행되어 동작됨.
10. 다수의 클래스가 작성되고, 관계를 가지게되면서  클래스 간의 결합도를 줄이기위한 
    노력이 필요함.
11. 팩키지, 클래스와 함수, 변수 명명시 왜 필요한지,  어떻게 활용될것인지를 고려해 타 
   개발자에게  빠르게 인지될수 있도록 간략하게 명명하기위해 노력함.
12. 다수의 클래스가 동일한 성격, 성향의 기능이 구현되어야할 때  확장성을위한 단일 상속
    (일반클래스, 추상클래스)를 고려함.
13. 다수의 클래스가 한개의 동일한 성격을 가지며,  중복되는 변수와 함수가 존재할때 
    추상클래스 작성을 고려함.
14. 상속과 실체화를 통해 각각 실행 형태는 다르지만,  활용시에 동일한 코드를 제공하는 
    다형성이 부여됨.
15. 서로 관련되지않은 클래스들을 대상으로 해당 클래스들이 공통적으로 포함되어야하는 
    정적 변수와 함수 구현 및 활용을 강제하여 표준화할 필요성이 존재하고, 다형성을 부여
    하기위해 인터페이스를 고려함.
    * 클래스 자체의 문제 해결보다 관련된 클래스들 전체를 대상으로한  문제 해결은 
      결합도와 복잡도가 증가되며, 인터페이스는 상이한  클래스들간의 관계에서 복잡도를 
      감소시킴.
16. 캡슐화(접근지정자[public, protected, private, default])를 통해 의도하지않는 접근을 막고, 
    변수와 함수를 보호하고 통제함.

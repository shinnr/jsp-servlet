/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.73
 * Generated at: 2020-06-11 03:33:23 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp._08;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.Date;
import java.text.SimpleDateFormat;

public final class makeSession_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	// 세션의 생성과 활용
	//		1. 클라이언트(브라우저)의 서버 대상 최초 요청시 쿠키 베이스의 
	//		      세션 제너레이트 키(서버에 세션을 신규 생성요청 시그널)를 서버로 전송.
	//		2. 서버에 전송된 세션 제너레이트 키를 활용해서 서버 내 신규 세선이 생성되고,
	//		      새로 생성된 세션에는 세션ID(랜덤하지만 유니크한 값)가 할당
	//		3. 신규 생성된 세션에 할당된 세션ID는 해당 최초 요청의 클라이언트 대상
	//	   	       최초 응답 전송시 응답 패킷의 응답헤더에 포함되어 전송
	//		4. 클라이언트가 취득한 서버단에 존대하는 세션의 세션ID는 해당 클라이언트가
	//		      서버 대상 기타 요청시마다 쿠키 베이스로 서버대상 전송
	//		5. 서버는 클라이언트로부터 전송되는 기타 요청정보에 포함된 세션 ID를 활용해
	//		       해당 클라이언트에 할당된 세션을 특정 및 활용
	//		6. 활용 용도 : 상이한 요청과 응답 사이클 간의 데이타 공유
	// 프로그래밍 언어(서버 사이드 스크립트 언어)별 쿠키 베이스로 전송되는 세션ID키가 상이
	//		JSP : JSESSIONID=값
	//		ASP : ASPSESSIONID=값
	//		PHP : PHPSESSIONID=값
	// 세션 취득 : request.getSession();
	//         request.getSession(true|false);
	//				   true - 기존 생성된 세션이 존재하면 해당 세션을 반환
	//                        기존 생성된 세션이 존재하지 않으면 에러없이 신규 세션을 생성하고 반환
	//				   false - 기존 생성된 세션이 존재하면 해당 세션을 반환
	//						       기존 생성된 세션이 존재하지 않으면 에러 발생
	//	세션 유효시간(만료시간) : Tomcat(웹 애플리케이션 서버 , WAS, 웹 컨테이너, 서블릿 컨테이너 )default 30분
	//	                    *default 세션 유효시간은 WAS별 상이
	//		* 국지적 세션 유효시간 설정 - 특정 클라이언트에 할당된 서버 내 특정 세션을 대상으로 하는 만료시간 설정
	//							session.setMaxInActiveInterval(초단위 설정)
	// 		* 전역적 세션 유효시간 설정 - 해당 웹 애플리케이션 활용 전체 클라이언트에 할당된 전체 세션대상의 만료시간 설정
	//							web.xml 내 <session-timeout>분단위 세션 만료시간 설정<session-timeout>
	//	세션 삭제 : 클라이언트의 최종 서버대상 요청 이후 세션 만료시간 경과시 
	//			session.invalidate()
	
	session.setMaxInactiveInterval(60*30*10);
	
	SimpleDateFormat dateFormat = new SimpleDateFormat("YYYY/MM/DD hh24:mm:ss");

      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t세션 아이디 : ");
      out.print(session.getId() );
      out.write("<br/>\r\n");
      out.write("\t세션 최초 생성 일시 : ");
      out.print(dateFormat.format(new Date(session.getCreationTime())) );
      out.write("<br/>\r\n");
      out.write("\t클라이언트 최종 요청 일시 : ");
      out.print(dateFormat.format(new Date(session.getLastAccessedTime())) );
      out.write("<br/>\r\n");
      out.write("\t\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}

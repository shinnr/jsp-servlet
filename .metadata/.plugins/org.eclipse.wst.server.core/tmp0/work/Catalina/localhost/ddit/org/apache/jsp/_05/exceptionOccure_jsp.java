/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.73
 * Generated at: 2020-06-10 01:15:39 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp._05;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class exceptionOccure_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			"/error/errorCTRL.jsp", true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<!-- \r\n");
      out.write("\tJava Execption : 애플리케이션 개발 및 실행 중 발생 또는 발생의 여지가 존대하며, 발생시 정상적인 \r\n");
      out.write("\t                                       코드의 실행 또는 정상적인 애플리케이션의 종료를 보장할 수 없으므로 반드시 대응되어야 하며,\r\n");
      out.write("\t                                       개발자(논리적 사고의 모순), 유저(신박한 유저의 서비스이용방법), 물리적인 리소스에 발생되는 모든 에러\r\n");
      out.write("\t                  1. 에러 카테고리\r\n");
      out.write("\t                  \t1.1 컴파일 에러(Compile-time Errors) : 개발 간 또는 빌드시 컴파일러에 의해 파악되며, 발생됨\r\n");
      out.write("\t                  \t1.2 런타임 에러(Run-time Error) : 애플리케이션 실행 간 발생되며, 애플리케이션의 비정상적인 종료\r\n");
      out.write("\t                  \t                                                                   또는 내부 리소스간의 충돌, 하드웨어 셧-다운 등을 유발\r\n");
      out.write("\t                  \t1.3 로직 에러(Logic Error) : 애플리케이션 실행 간 개발자의 논리적인 모순(무논리의 알고리즘)에 의해 발생되는 에러로서\r\n");
      out.write("\t                  \t\t\t\t\t\t\t   무한루프, 실행되어야하는 코드가 미실행, 예상랄 수 없는 결과의 유발\r\n");
      out.write("\t                  2. 예외(Exception) 카테고리\r\n");
      out.write("\t                  \t2.1 Checked Exception : 컴파일 예외\r\n");
      out.write("\t                  \t2.2 UncChecked Exception : 런타임 예외\r\n");
      out.write("\t                  \t2.3 Fatal : 물리적인 리소스의 한계 또는 개발자가 예상하지 못한 유저의 서비스 이용간의 신박한 조작 등의 개발자가\r\n");
      out.write("\t                  \t                           대응해야할 범주를 벗어난 예외 \r\n");
      out.write("\t                  3. 예외 처리 규칙\r\n");
      out.write("\t                  \t3.1  작은 범위, 구체적인 예외 선언\r\n");
      out.write("\t                  \t3.2  예외 발생 여지가 존재하는 코드에는 반드시 예외 처리\r\n");
      out.write("\t                  \t3.3  예외 발생시의 Catch는 발생 또는 발생될 여지가 존재한 해당 코드의 호출처에 처리\r\n");
      out.write("\t                  \t3.4  예외 발생시 활용되어지는 모든 리소스는 반납 처리\r\n");
      out.write("\t                  \t3.5  예외 발생 정보는 반드시 로그기록 파일단위로 저장되어 활용\r\n");
      out.write("\t                  \t3.6  예외 발생시 유저, 해당 애플리케이션 운영단 대상으로 적절한 메세지가 제공\r\n");
      out.write("\t                  \t3.7  예외는 사용자 정의 예외를 작성해서 대응\r\n");
      out.write("\t                  \t3.8 예외도 Java Doc API화\r\n");
      out.write("\t                  \t\r\n");
      out.write("\t\tJSP내 익셉션 처리\r\n");
      out.write("\t\t\tisErrorPage : default false(해당 jsp파일 내에서 발생된 익셉션을 직접 처리 않음)\r\n");
      out.write("\t\t\t\t\t\t  exception 기본객체 접근 권한 없음\r\n");
      out.write("\t\t\t\t\t\t  exception 기본객체 접근 및 기타 jsp 파일에서 발생된 에러 대응을 위해 true가 선언\r\n");
      out.write("\t\t\terrorPage : 해당 jsp 내에서 발생된 익셉션을 처리하는 특정 jsp파일 경로(포워드 처리)\r\n");
      out.write(" -->\r\n");
      out.write(" \r\n");
      out.write(" ");

 	int i = 1 / 0;
 
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}

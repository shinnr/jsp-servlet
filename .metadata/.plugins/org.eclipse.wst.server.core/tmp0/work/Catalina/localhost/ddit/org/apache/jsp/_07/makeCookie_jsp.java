/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.73
 * Generated at: 2020-06-11 00:37:07 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp._07;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.net.URLEncoder;

public final class makeCookie_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");

	// 쿠키 생성 : 클라이언트 (브라우저 : 자바스크립트)
	//		 : 서버(자바 : 응답 객체의 응답 헤더에 저장 후 클라이언트에 전송)
	// 쿠키 저장소 : 클라이언트(브라우저)
	//			브라우저 별 상이한 저장소 형태 - 해당 브라우저의 메모리 활용
	//                              - 해당 브라우저가 인스톨 된 폴더 내 특정 위치 
	// 쿠키 사이즈 : 4KB이내로 생성
	// 쿠키 성향 : 클라이언트(브라우저의 쿠키 저장소)에 저장된 쿠키는 해당 클라이언트
	//         브라우저의 서버 대상 요청시 마다 용천 헤더에 포함되어 전송되려는 성향이 존재함 
	//         * 존송 제한 : 쿠키 생성 시 패스, 도메인 속성 활용 
	// 쿠키 생성 패턴 : 키=값; 유효시간=값; 패스=값; 도메인=값;
	// 쿠키 패스 속성 : default /(컨텍스트 루트 : 루트)
	// 쿠키 도메인 속성 : default 래당 쿠키 생성시 요청 도메인
	// 쿠키 유효시간(만료시간) : 해당 쿠키 생성시 선언된 쿠키의 삭제까지의 남은 시간
	//                   default -1(해당 쿠키가 저장된 브라우저의 종료시까지 존속)
	
	Cookie memidCookie = new Cookie("mem_id", "a001");
	memidCookie.setPath("/");
	response.addCookie(memidCookie);
	
	Cookie mempwdCookie = new Cookie("mem_pass", "1234");
	//쿠키의 유효시간(만료시간) :초단위 설정
	mempwdCookie.setMaxAge(60*60*24);
	//http://localhost/ddit/07/makeCookie.jsp - 브라우저 저장소에 저장된 쿠키 전송
	//http://localhost/ddit/06/makeCookie.jsp - 브라우저 저장소에 저장된 쿠키 미전송
	mempwdCookie.setPath("/ddit/07/");
	response.addCookie(mempwdCookie);
	
	//쿠키 저장소에 설정된 인코딩 타입 : ISO-8859-1(라틴어)
	//UTF-8(김은대) => 쿠키 저장소에 전송 => ISO-8859-1(UTF-8(김은대)) => 쿠키 저장소로부터 취득 => UTF-8(김은대) => UTF-8로 디코딩 후 활용
	//"mem_name" :UTF-8(김은대); 유효시간=60*60; 도메인=www.bagrant.co.kr; path=/ddit/07; 
	Cookie memnmCookie = new Cookie("mem_name", URLEncoder.encode("김은대", "UTF-8"));
	memnmCookie.setDomain("www.bagrant.co.kr");
	memnmCookie.setPath("/ddit/07/");
	memnmCookie.setMaxAge(60*60);
	response.addCookie(memnmCookie);

      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t쿠키가 잘 구워졌습니당!@!@!@~!@!~\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}

/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.73
 * Generated at: 2020-06-24 01:16:41 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp._14;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import org.apache.commons.io.FilenameUtils;
import org.apache.commons.fileupload.FileItem;
import java.util.List;
import java.io.File;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;

public final class result_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	//클라이언트(브라우저) 보안정책 (Security Policy)
	//		브라우저는 해당 하드웨어시스템 내 파일 또는 디렉토리에 접근은 가능하지만,
	//		신규 파일 또는 디렉토리의 생성, 파일 및 디렉토리 수정과 삭제는 불가.
	//		*IE ActiveX를 뢀용해서 파일 생성, 수정, 삭제가 가능
	//서버의 파일 업로드 처리 개발환경
	// 	1. 라이브러리 
	//		http://commons.apache.org
	//			commons-fileupload-1.2.2.jar
	//			commons-io-2.3.jar
	//		WEB-INF/lib
	
	//서버대상 업로드된 파일의 저장 처리 : 서버 내 특정 파일 시스템 활용
	//						  파일 정보들은 DB 대상 저장 
	
	String fileSavePath = application.getRealPath("/upload");
	
	int fileSizeMax = 1024 * 1024 * 100;
	
	// 클라이언트(브라우저) 서버 대상 요청
	//		일반 요청
	//			직접 브라우저의 주소창에 URL을 입력.
	//			location.href = '주소'
	//			location.replace('주소')
	//			<a href = '주소'>클릭</a>
	//			form 태그(enctype=application/x-www-form-urlencoded)
	//			ajax
	//		스트리밍 요청(파일)
	//			form 태그(method=post, enctype=multipart/form-data)
	//			ajax(method=post, enctype=multipart/form-data)
	
	boolean multipartFlag = ServletFileUpload.isMultipartContent(request);
	if(multipartFlag){
		// 서버의 업로드된 파일 저장 처리
		//		1. 업로드된 파일의 임시저장소 저장(서버 내 서버가 관리하는 파일 시스템, 서버의 메모리)
		//			* 임시저장소에 저장되는 파일의 확장자 : *.tmp
		//			* 임시저장소 저장 대상 파일의 사이즈 제한
		//			* 임시저장소로 활용되는 서버 내 특정 파일 패스를 지정
		//		2. 업로드된 파일의 실제 저장소 저장
		//			* 실제저장소 저장 대상 파일의 사이즈 제한
		//			* 실제저장소로 활용될 서버 내 특정 파일 패스 지정 가능
		//		3. 임시저장소에 저장된 파일의 실제저장소 저장시 임시저장소에 저장되었던 임시 파일 자동 삭제
		
		DiskFileItemFactory factory = new DiskFileItemFactory();
		factory.setSizeThreshold(fileSizeMax);
// 		factory.setRepository(new File("임시저장소로로 활용될 서버 내 파일 패스 지정"));
		
		ServletFileUpload servletFileUpload = new ServletFileUpload(factory);
		// 서버 대상 업로드 된 파일 단위의 파일 사이즈 제한
// 		servletFileUpload.setFileSizeMax(fileSizeMax);
		// 서버 대상 업로드 된 전체 파일 대상의 사이즈 제한
		servletFileUpload.setSizeMax(fileSizeMax);
		
		//fileUploadForm.jsp(form태그 method=ost, enctype=multipart/form-data)
		//	FileItem(서버 내 스트리밍을 통해 취득한 자원)
		//	폼필드
		//		input[type=text name=mem_id]
		//		input[type=text name=mem_pass]
		//		input[type=text name=mem_name]
		// 	파일		
		//		input[type=file name=filse]*2
		
		List<FileItem> items = servletFileUpload.parseRequest(request);
		for(FileItem item : items){
			if(item.isFormField()){
				//폼필드
				//input[type=text name=mem_id]
				//input[type=text name=mem_pass]
				//input[type=text name=mem_name]
				out.println("폼필드<br/>");
				out.println("폼필드 키 : " + item.getFieldName() + 
							"| 값 : " + item.getString("UTF-8") + "<br/>");
			}else{ 
				out.println("파일<br/>");
				out.println("파일의 키 : " + item.getFieldName() + "<br/>");
				out.println("파일 파일명 : " + item.getName() + "<br/>");
				out.println("파일 컨텐츠타입: " + item.getContentType() + "<br/>");
				out.println("파일 사이즈 : " + item.getSize() + "<br/>");
				
				// 브라우저별 파일명 전송 처리
				// d:\temp\a.png or a.png
				//a.png반환
				String fileName = FilenameUtils.getName(item.getName());
				
				File saveFile = new File(fileSavePath, fileName);
				item.write(saveFile);
			}
		}
	}

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}

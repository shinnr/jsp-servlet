/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.73
 * Generated at: 2020-06-17 01:23:22 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp._11;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.BufferedWriter;
import java.lang.reflect.Method;
import java.lang.reflect.Constructor;

public final class customTagGenerator_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	// 애플리케이션 실행 시 다양한 클래스 로더가 다양한 시점에 해당 애플리케이션을 구성하는
	//자원들을 메모리에 상주시킴
	//클래스 로더
	//						ExtClassLoader				AppClassLoader					SubAppClassLoader					ServletContainerClassLoader
	///		Standalone		JDK인스톨폴더/jre/lib/rt.jar		build path 하위 **.*.class		import로 활용되는 jar 내 **.*class				X
	//		
	//		Web				JDK인스톨폴더/jre/lib/rt.jar		build path 하위 **.*.class		import로 활용되는 jar 내 **.*class		Servlet Class, jsp 호출 => Servlet Class 로딩
	//	사용자 정의 태그 : *.tld
	// tdl파일 위치 : WEB-INF/ 하위	
	Class targetClass = Class.forName("kr.or.ddit.utiles.CustomTargetClass");
	
	//Constructor[] constructors = targetClass.getConstructors();
	Constructor constructor = targetClass.getConstructor();
	Object instaceClass = constructor.newInstance();
	
	//targetClass.getName => kr.or.ddit.utiles.CustomTargetClass
	//CustomTargetClass 취득
	String className = targetClass.getName().substring(targetClass.getName().lastIndexOf(".")+1);
	
	String declareStart = "<?xml version=\"1.0\" encoding=\"UTF-8\" ?> \n" +
            	"<taglib xmlns=\"http://java.sun.com/xml/ns/j2ee\" \n" + 
                "\t\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n" +
                "\t\txsi:schemaLocation=\"http://java.sun.com/xml/ns/j2ee \n" +
                "\t\thttp://java.sun.com/xml/ns/j2ee/web-jsptaglibrary_2_0.xsd\" \n" +
                "\t\tversion=\"2.0\"> \n" +
                "\t<tlib-version>1.0</tlib-version>\n" +
                "\t<short-name>" + className.toLowerCase() + "</short-name>\n" +
                "\t<uri>http://www.bagrant.com/taglib/" + className.toLowerCase() + "-taglib</uri>\n";
	String declareContent = "";
	String declareEnd = "</taglib>";
	
	targetClass.getMethod("plus", Integer.class, Integer.class);
	
	Method[] methods = targetClass.getMethods();
	
	String temp = "";
	
	String extendsObjectMethods = "clone equals finalize getClass hashCode notify notifyAll toString wait";
	
	for(Method method : methods){
		if(!extendsObjectMethods.contains(method.getName())){
			/* public static Integer plus(Integer i, Integer j){
				return i + j;
			} */
			
			Class[] params = method.getParameterTypes();
			
			//java.lang.Integer plus(
			String methodSignature =  method.getReturnType().getName() + " " + method.getName() + "(" ;
			
			int paramCnt = 1;
			for(Class param : params){
			//java.lang.Integer plus(java.lang.Integer, java.lang.Integer
				methodSignature += param.getName();
				if(paramCnt++ < params.length){
					methodSignature += ", ";
				}
			}
			//java.lang.Integer plus(java.lang.Integer, java.lang.Integer)
			methodSignature += ")";
			
			declareContent += "\t<function>\n" + 
									"\t\t<description>"+ method.getName() + "의 활용</discription>\n" +
									"\t\t<name>" + method.getName() + "</name>\n" +
									"\t\t<function-class>" + targetClass.getName() + "</function-class>\n" +
									"\t\t<function-signature>" + methodSignature + "</function-signature>\n" +
									"\t\t<example>\n" +
										"\t\t\t<![CDATA[\n" + 
											"\t\t\t\t${" + className.toLowerCase() + ":" + 
															methodSignature.substring(methodSignature.indexOf(" ") + 1 ) +
													  "}\n" +
											"\t\t\t]]>\n" +
										"\t\t</example>\n" +
								"\t</function>\n";
		}
	}
	
	BufferedWriter writer = null;
	
	try{
		writer = new BufferedWriter(new FileWriter(new File("D:\\temp\\" + className.toLowerCase() + ".tld")));
		writer.write(declareStart + declareContent + declareEnd);
	}catch(IOException e1){
		e1.printStackTrace();
	}finally{
		writer.close();
	}

      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("사용자 정의 태그가 작성되었습니다.\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
